// Code generated by "go run gen_elements.go"; DO NOT EDIT.
package types

import (
	"errors"
	"fmt"
)

func (es *ElementsFloat32) Size() int {
	return len(*es)
}

func (es *ElementsFloat32) Clone() Elements {
	nArray := make(ElementsFloat32, es.Size())
	copy(nArray, *es)
	return &nArray
}

func (es *ElementsFloat32) DType() DType {
	return DFloat32
}

func (es *ElementsFloat32) IGet(i int) (e Element, err error) {
	if i > es.Size() {
		err = errors.New(fmt.Sprintf("index out of slice with length %d", es.Size()))
		return
	}
	e = (*es)[i]
	return
}

func (es *ElementsFloat32) ISet(i int, e Element) (isNaN bool, err error) {
	if i > es.Size() {
		err = errors.New(fmt.Sprintf("index out of slice with length %d", es.Size()))
		return
	}
	var v float32
	v, isNaN = e.Float32()
	if isNaN {
		return
	}
	(*es)[i] = DTFloat32(v)
	return
}

func (es *ElementsFloat64) Size() int {
	return len(*es)
}

func (es *ElementsFloat64) Clone() Elements {
	nArray := make(ElementsFloat64, es.Size())
	copy(nArray, *es)
	return &nArray
}

func (es *ElementsFloat64) DType() DType {
	return DFloat64
}

func (es *ElementsFloat64) IGet(i int) (e Element, err error) {
	if i > es.Size() {
		err = errors.New(fmt.Sprintf("index out of slice with length %d", es.Size()))
		return
	}
	e = (*es)[i]
	return
}

func (es *ElementsFloat64) ISet(i int, e Element) (isNaN bool, err error) {
	if i > es.Size() {
		err = errors.New(fmt.Sprintf("index out of slice with length %d", es.Size()))
		return
	}
	var v float64
	v, isNaN = e.Float64()
	if isNaN {
		return
	}
	(*es)[i] = DTFloat64(v)
	return
}
